import { Component, EventEmitter, forwardRef, Host, Inject, Input, Optional, Output, SkipSelf, } from "@angular/core";
import { FormControl, NG_VALUE_ACCESSOR, Validators, } from "@angular/forms";
import { MatSelectCountryLangToken } from "./tokens";
import { distinctUntilChanged } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/autocomplete";
import * as i6 from "@angular/material/core";
import * as i7 from "@angular/material/icon";
import * as i8 from "@angular/material/progress-bar";
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export class MatSelectCountryComponent {
    constructor(i18n, controlContainer, cdRef) {
        this.i18n = i18n;
        this.controlContainer = controlContainer;
        this.cdRef = cdRef;
        this.appearance = "outline";
        this.countries = [];
        this.placeHolder = "Select country";
        this.required = false;
        /** @deprecated Use clearable to allow user unselect country.*/
        this.nullable = true;
        this.itemsLoadSize = 20;
        this.showCallingCode = false;
        this.excludedCountries = [];
        this.name = "country";
        this.error = "";
        this.cleareable = false;
        this.extendWidth = false;
        // tslint:disable-next-line: no-output-on-prefix
        this.onCountrySelected = new EventEmitter();
        this._formControl = new FormControl({ value: "", disabled: false }, this.required ? [Validators.required] : []);
        this.debounceTime = 300;
        this.filterString = "";
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.onTouched();
    }
    async ngOnInit() {
        if (this.formControlName && this.controlContainer) {
            this.control = this.controlContainer.control.get(this.formControlName);
            this._formControl = new FormControl({ value: this.control.value?.name, disabled: this.disabled }, this.control.hasValidator(Validators.required)
                ? [Validators.required]
                : []);
            this.control.valueChanges
                .pipe(distinctUntilChanged()) // Workaround for Angular Issue: https://github.com/angular/angular/issues/12540
                .subscribe((el) => {
                this._formControl.setValue(this.getValueLabel(el));
                this._applyFilters(el?.name ?? el?.alpha2Code);
                // this.inputChanged(this.getValueLabel(el));
            });
        }
        else if (this.formControlName && !this.controlContainer) {
            console.warn("Can't find parent FormGroup directive");
            this._formControl = new FormControl({ value: null, disabled: this.disabled }, this.required ? [Validators.required] : []);
        }
        else {
            this._formControl = new FormControl({ value: this.value?.name, disabled: this.disabled }, this.required ? [Validators.required] : []);
        }
        this._formControl.valueChanges.subscribe((el) => {
            this.inputChanged(el);
        });
        if (!this.countries.length) {
            this.countries = await this._loadCountriesFromDb();
        }
        this.value = this.countries.find((el) => el.alpha2Code == this.value?.alpha2Code &&
            !this.excludedCountries.find((el2) => el2.alpha2Code == el.alpha2Code));
        this._formControl.setValue(this.getValueLabel(this.value));
        this._applyFilters(this._value?.name);
    }
    ngOnChanges(changes) {
        let mustUpdateValueAndFilters = false;
        if (changes.countries !== undefined) {
            if (!changes.countries?.currentValue ||
                changes.countries?.currentValue.length === 0) {
                this._loadCountriesFromDb().then((transCountries) => {
                    this.countries = transCountries;
                    this._formControl.setValue(this.getValueLabel(this.value));
                    this._applyFilters(this._value?.name);
                });
            }
            else {
                this.countries = changes.countries?.currentValue ?? [];
                this.value = this.countries.find((el) => el.alpha2Code == this.value?.alpha2Code &&
                    !this.excludedCountries.find((el2) => el2.alpha2Code == el.alpha2Code));
                mustUpdateValueAndFilters = true;
            }
        }
        if (changes.excludedCountries?.currentValue) {
            this.value = this.countries.find((el) => el.alpha2Code == this.value?.alpha2Code &&
                !this.excludedCountries.find((el2) => el2.alpha2Code == el.alpha2Code));
            mustUpdateValueAndFilters = true;
        }
        if (this.countries &&
            this.countries.length &&
            changes._value?.currentValue) {
            this.countries = this.countries.map((country) => country.alpha2Code === changes._value?.currentValue.alpha2Code
                ? changes._value?.currentValue
                : country);
            const country = this.countries.find((country) => country.alpha2Code === changes._value?.currentValue.alpha2Code &&
                !this.excludedCountries.find((el2) => el2.alpha2Code == country.alpha2Code));
            this.value = country;
            this._formControl.setValue(this.getValueLabel(this.value));
            if (this.value?.alpha2Code !== changes._value?.previousValue?.alpha2Code) {
                this.onCountrySelected.emit(this.value);
            }
        }
        if (changes.disabled?.currentValue !== changes.disabled?.previousValue) {
            this.disabled = changes.disabled?.currentValue;
            if (this.disabled) {
                this._formControl.disable();
                if (this.control)
                    this.control.disable();
            }
            else {
                this._formControl.enable();
                if (this.control)
                    this.control.enable();
            }
        }
        if (changes.required?.currentValue !== changes.required?.previousValue) {
            this.required = changes.required?.currentValue;
            if (this.required) {
                this._formControl.setValidators([Validators.required]);
                if (this.control) {
                    this.control.addValidators([Validators.required]);
                }
            }
            else {
                this._formControl.setValidators([]);
                if (this.control) {
                    this.control.removeValidators([Validators.required]);
                }
            }
            this._formControl.updateValueAndValidity();
            if (this.control) {
                this.control.updateValueAndValidity();
            }
        }
        if (changes.appearance?.currentValue ??
            "outline" !== changes.appearance?.previousValue) {
            this.appearance = changes.appearance?.currentValue ?? "outline";
        }
        if (changes.label?.currentValue !== changes.label?.previousValue) {
            this.label = changes.label?.currentValue;
        }
        if (changes.placeHolder?.currentValue ??
            "Select country" !== changes.placeHolder?.previousValue) {
            this.placeHolder = changes.placeHolder?.currentValue ?? "Select country";
        }
        if (changes.class?.currentValue !== changes.class?.previousValue) {
            this.class = changes.class?.currentValue;
        }
        if (changes.name?.currentValue ??
            "country" !== changes.name?.previousValue) {
            this.name = changes.name?.currentValue ?? "country";
        }
        if (changes.error?.currentValue !== changes.error?.previousValue) {
            this.error = changes.error?.currentValue;
        }
        if (changes.hint?.currentValue !== changes.hint?.previousValue) {
            this.hint = changes.hint?.currentValue;
        }
        if (changes.tabIndex?.currentValue !== changes.tabIndex?.previousValue) {
            this.tabIndex = changes.tabIndex?.currentValue;
        }
        if (changes.loading?.currentValue !== changes.loading?.previousValue) {
            this.loading = changes.loading?.currentValue;
            if (this.loading || this.loadingDB || this.disabled) {
                this._formControl.disable();
            }
            else {
                this._formControl.enable();
            }
        }
        if (changes.itemsLoadSize?.currentValue !==
            changes.itemsLoadSize?.previousValue) {
            this.itemsLoadSize = changes.itemsLoadSize?.currentValue;
            mustUpdateValueAndFilters = true;
        }
        if (changes.showCallingCode?.currentValue !==
            changes.showCallingCode?.previousValue) {
            this.showCallingCode = changes.showCallingCode?.currentValue;
            this._formControl.setValue(this.getValueLabel(this.value));
        }
        if (changes.countries?.currentValue) {
            this.countries = changes.countries.currentValue;
        }
        if (changes.excludedCountries?.currentValue) {
            this.excludedCountries = changes.excludedCountries.currentValue;
        }
        if (changes.language?.currentValue &&
            changes.language.currentValue !== changes.language.previousValue) {
            this._loadCountriesFromDb().then((transCountries) => {
                this.countries = transCountries.filter((el) => this.countries.findIndex((el2) => el2.alpha2Code == el.alpha2Code) >= 0);
                this.value = this.countries.find((el) => el.alpha2Code == this.value?.alpha2Code &&
                    !this.excludedCountries.find((el2) => el2.alpha2Code == el.alpha2Code));
                this._formControl.setValue(this.getValueLabel(this.value));
                this._applyFilters(this._value?.name);
            });
        }
        if (mustUpdateValueAndFilters) {
            this._applyFilters(this._value?.name);
            this._formControl.setValue(this.getValueLabel(this.value));
        }
    }
    clear() {
        this.filterString = "";
        this._applyFilters("");
        this.value = null;
        this._formControl.reset();
        if (!this.formControlName) {
            this.onCountrySelected.emit(null);
        }
        else if (this.control) {
            this.control.reset();
        }
    }
    inputChanged(value) {
        if (value != this.value?.name) {
            if (!value) {
                this.clear();
                return;
            }
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
            }
            this.debounceTimeout = setTimeout(() => {
                this._applyFilters(value ?? "");
            }, this.debounceTime);
        }
    }
    onOptionsSelected($event) {
        const country = this.countries.find((country) => country.name === $event.option.value);
        this.filterString = country.name;
        if (this.value?.alpha2Code !== country.alpha2Code) {
            this.value = country;
            this._formControl.setValue(this.getValueLabel(this.value));
            this.onCountrySelected.emit(this.value);
        }
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    getValueLabel(el) {
        if (!el)
            return "";
        const mainValue = el.name
            ? el.name
            : el.alpha3Code
                ? el.alpha3Code
                : el.alpha2Code ?? "";
        if (this.showCallingCode) {
            return mainValue + (el.callingCode ? " (" + el.callingCode + ")" : "");
        }
        return mainValue;
    }
    async _loadCountriesFromDb() {
        this._formControl.disable();
        this.loadingDB = true;
        let translatedCountries = [];
        try {
            translatedCountries = await this._importLang();
        }
        catch (err) {
            console.error("Error: " + err);
        }
        this.loadingDB = false;
        if (this.loading || this.loadingDB || this.disabled) {
            this._formControl.disable();
        }
        else {
            this._formControl.enable();
        }
        return translatedCountries;
    }
    _importLang() {
        const lang = ((this.language || this.i18n) ?? "").toLowerCase();
        switch (lang) {
            case "be":
                return import("./i18n/be")
                    .then((result) => result.COUNTRIES_DB_BY)
                    .then((y) => y);
            case "br":
                return import("./i18n/br")
                    .then((result) => result.COUNTRIES_DB_BR)
                    .then((y) => y);
            case "ca":
                return import("./i18n/ca")
                    .then((result) => result.COUNTRIES_DB_CA)
                    .then((y) => y);
            case "de":
                return import("./i18n/de")
                    .then((result) => result.COUNTRIES_DB_DE)
                    .then((y) => y);
            case "es":
                return import("./i18n/es")
                    .then((result) => result.COUNTRIES_DB_ES)
                    .then((y) => y);
            case "eu":
                return import("./i18n/eu")
                    .then((result) => result.COUNTRIES_DB_EU)
                    .then((y) => y);
            case "fr":
                return import("./i18n/fr")
                    .then((result) => result.COUNTRIES_DB_FR)
                    .then((y) => y);
            case "gl":
                return import("./i18n/gl")
                    .then((result) => result.COUNTRIES_DB_GL)
                    .then((y) => y);
            case "hr":
                return import("./i18n/hr")
                    .then((result) => result.COUNTRIES_DB_HR)
                    .then((y) => y);
            case "hu":
                return import("./i18n/hu")
                    .then((result) => result.COUNTRIES_DB_HU)
                    .then((y) => y);
            case "it":
                return import("./i18n/it")
                    .then((result) => result.COUNTRIES_DB_IT)
                    .then((y) => y);
            case "nl":
                return import("./i18n/nl")
                    .then((result) => result.COUNTRIES_DB_NL)
                    .then((y) => y);
            case "pt":
                return import("./i18n/pt")
                    .then((result) => result.COUNTRIES_DB_PT)
                    .then((y) => y);
            case "ru":
                return import("./i18n/ru")
                    .then((result) => result.COUNTRIES_DB_RU)
                    .then((y) => y);
            case "uk":
                return import("./i18n/uk")
                    .then((result) => result.COUNTRIES_DB_UA)
                    .then((y) => y);
            default:
                return import("./i18n/en")
                    .then((result) => result.COUNTRIES_DB)
                    .then((y) => y);
        }
    }
    _applyFilters(value) {
        const filterValue = (value ?? "").toLowerCase();
        if (!filterValue) {
            this.filteredOptions = this.countries.filter((el) => !this.excludedCountries.find((el2) => el2.alpha2Code == el.alpha2Code));
        }
        else {
            this.filteredOptions = this.countries.filter((option) => !this.excludedCountries.find((el2) => el2.alpha2Code == option.alpha2Code) &&
                (option.name?.toLowerCase().includes(filterValue) ||
                    option.alpha2Code.toLowerCase().includes(filterValue) ||
                    option.alpha3Code?.toLowerCase().includes(filterValue) ||
                    this.getValueLabel(option)
                        .toLocaleLowerCase()
                        .includes(filterValue)));
        }
        if (this.itemsLoadSize) {
            this.filteredOptions = this.filteredOptions.slice(0, this.itemsLoadSize);
        }
        // options in the UI are not updated when this component is used within a host component that uses OnPush
        this.cdRef.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.3", ngImport: i0, type: MatSelectCountryComponent, deps: [{ token: forwardRef(() => MatSelectCountryLangToken) }, { token: i1.ControlContainer, host: true, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.3", type: MatSelectCountryComponent, selector: "mat-select-country", inputs: { appearance: "appearance", countries: "countries", label: "label", placeHolder: "placeHolder", required: "required", disabled: "disabled", nullable: "nullable", readonly: "readonly", tabIndex: "tabIndex", class: "class", itemsLoadSize: "itemsLoadSize", loading: "loading", showCallingCode: "showCallingCode", excludedCountries: "excludedCountries", language: "language", name: "name", error: "error", cleareable: "cleareable", formControlName: "formControlName", panelWidth: "panelWidth", _value: ["value", "_value"], extendWidth: "extendWidth", hint: "hint" }, outputs: { onCountrySelected: "onCountrySelected" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MatSelectCountryComponent),
                multi: true,
            },
        ], usesOnChanges: true, ngImport: i0, template: "<mat-form-field [appearance]=\"appearance\" [class.d-block]=\"extendWidth\">\n  <mat-label *ngIf=\"label\">{{ label }}</mat-label>\n  <input\n    autocomplete=\"off\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [formControl]=\"_formControl\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n  />\n  <mat-progress-bar\n    *ngIf=\"this.loadingDB || this.loading\"\n    mode=\"buffer\"\n  ></mat-progress-bar>\n  <mat-autocomplete\n    [panelWidth]=\"panelWidth\"\n    #countryAutocomplete=\"matAutocomplete\"\n    (optionSelected)=\"onOptionsSelected($event)\"\n  >\n    <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country.name\">\n      <div class=\"d-flex\">\n        <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n        <small class=\"country-list-item\" [title]=\"getValueLabel(country)\">{{\n          getValueLabel(country)\n        }}</small>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <div class=\"d-flex mr-1\" matSuffix>\n    <mat-icon\n      *ngIf=\"this.value\"\n      [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\"\n      class=\"ml-1 s-20 secondary-text\"\n    ></mat-icon>\n    <mat-icon\n      class=\"ml-1\"\n      class=\"ml-1 cursor-pointer pos-rel\"\n      *ngIf=\"cleareable && !!value\"\n      (click)=\"clear()\"\n      >cancel</mat-icon\n    >\n  </div>\n  <mat-error *ngIf=\"_formControl && _formControl.invalid\">{{\n    error\n  }}</mat-error>\n  <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n</mat-form-field>\n", styles: [".cursor-pointer{cursor:pointer}.pos-rel{position:relative}.country-list-item{float:right;margin:auto;margin-left:.5rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.d-flex{display:flex;width:100%}.mr-1{margin-right:1rem}.ml-1{margin-left:1rem}.d-block{display:block}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "component", type: i5.MatAutocomplete, selector: "mat-autocomplete", inputs: ["aria-label", "aria-labelledby", "displayWith", "autoActiveFirstOption", "autoSelectActiveOption", "requireSelection", "panelWidth", "disableRipple", "class", "hideSingleSelectionIndicator"], outputs: ["optionSelected", "opened", "closed", "optionActivated"], exportAs: ["matAutocomplete"] }, { kind: "component", type: i6.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "directive", type: i5.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", inputs: ["matAutocomplete", "matAutocompletePosition", "matAutocompleteConnectedTo", "autocomplete", "matAutocompleteDisabled"], exportAs: ["matAutocompleteTrigger"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i8.MatProgressBar, selector: "mat-progress-bar", inputs: ["color", "value", "bufferValue", "mode"], outputs: ["animationEnd"], exportAs: ["matProgressBar"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.3", ngImport: i0, type: MatSelectCountryComponent, decorators: [{
            type: Component,
            args: [{ selector: "mat-select-country", providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MatSelectCountryComponent),
                            multi: true,
                        },
                    ], template: "<mat-form-field [appearance]=\"appearance\" [class.d-block]=\"extendWidth\">\n  <mat-label *ngIf=\"label\">{{ label }}</mat-label>\n  <input\n    autocomplete=\"off\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [formControl]=\"_formControl\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n  />\n  <mat-progress-bar\n    *ngIf=\"this.loadingDB || this.loading\"\n    mode=\"buffer\"\n  ></mat-progress-bar>\n  <mat-autocomplete\n    [panelWidth]=\"panelWidth\"\n    #countryAutocomplete=\"matAutocomplete\"\n    (optionSelected)=\"onOptionsSelected($event)\"\n  >\n    <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country.name\">\n      <div class=\"d-flex\">\n        <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n        <small class=\"country-list-item\" [title]=\"getValueLabel(country)\">{{\n          getValueLabel(country)\n        }}</small>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <div class=\"d-flex mr-1\" matSuffix>\n    <mat-icon\n      *ngIf=\"this.value\"\n      [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\"\n      class=\"ml-1 s-20 secondary-text\"\n    ></mat-icon>\n    <mat-icon\n      class=\"ml-1\"\n      class=\"ml-1 cursor-pointer pos-rel\"\n      *ngIf=\"cleareable && !!value\"\n      (click)=\"clear()\"\n      >cancel</mat-icon\n    >\n  </div>\n  <mat-error *ngIf=\"_formControl && _formControl.invalid\">{{\n    error\n  }}</mat-error>\n  <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n</mat-form-field>\n", styles: [".cursor-pointer{cursor:pointer}.pos-rel{position:relative}.country-list-item{float:right;margin:auto;margin-left:.5rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.d-flex{display:flex;width:100%}.mr-1{margin-right:1rem}.ml-1{margin-left:1rem}.d-block{display:block}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => MatSelectCountryLangToken)]
                }] }, { type: i1.ControlContainer, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: SkipSelf
                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { appearance: [{
                type: Input
            }], countries: [{
                type: Input
            }], label: [{
                type: Input
            }], placeHolder: [{
                type: Input
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], nullable: [{
                type: Input
            }], readonly: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], class: [{
                type: Input
            }], itemsLoadSize: [{
                type: Input
            }], loading: [{
                type: Input
            }], showCallingCode: [{
                type: Input
            }], excludedCountries: [{
                type: Input
            }], language: [{
                type: Input
            }], name: [{
                type: Input
            }], error: [{
                type: Input
            }], cleareable: [{
                type: Input
            }], formControlName: [{
                type: Input
            }], panelWidth: [{
                type: Input
            }], _value: [{
                type: Input,
                args: ["value"]
            }], extendWidth: [{
                type: Input
            }], hint: [{
                type: Input
            }], onCountrySelected: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,