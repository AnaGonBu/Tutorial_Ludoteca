import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from "@angular/core";
import { ControlContainer, ControlValueAccessor, FormControl } from "@angular/forms";
import { MatAutocompleteSelectedEvent } from "@angular/material/autocomplete";
import * as i0 from "@angular/core";
/**
 * Country interface ISO 3166
 */
export interface Country {
    name?: string;
    alpha2Code: string;
    alpha3Code?: string;
    numericCode?: string;
    callingCode?: string;
}
type CustomOptional<T, K extends keyof T> = Omit<T, K> & Partial<T>;
type CountryOptionalMandatoryAlpha2Code = CustomOptional<Country, "alpha3Code" | "name" | "callingCode" | "numericCode">;
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export declare class MatSelectCountryComponent implements OnInit, OnChanges, ControlValueAccessor {
    i18n: string;
    private controlContainer;
    private cdRef;
    appearance: "fill" | "outline";
    countries: Country[];
    label: string;
    placeHolder: string;
    required: boolean;
    disabled: boolean;
    /** @deprecated Use clearable to allow user unselect country.*/
    nullable: boolean;
    readonly: boolean;
    tabIndex: number | string;
    class: string;
    itemsLoadSize: number;
    loading: boolean;
    showCallingCode: boolean;
    excludedCountries: CountryOptionalMandatoryAlpha2Code[];
    language: string;
    name: string;
    error: string;
    cleareable: boolean;
    formControlName?: string;
    panelWidth?: string | undefined;
    _value?: Country | undefined;
    extendWidth: boolean;
    hint?: string | undefined;
    onCountrySelected: EventEmitter<Country>;
    _formControl: FormControl<string>;
    filteredOptions: Country[];
    db: Country[];
    loadingDB: boolean;
    debounceTime: number;
    filterString: string;
    onChange: any;
    onTouched: any;
    debounceTimeout: any;
    private control;
    constructor(i18n: string, controlContainer: ControlContainer, cdRef: ChangeDetectorRef);
    get value(): Country | null;
    set value(val: Country | null);
    ngOnInit(): Promise<void>;
    ngOnChanges(changes: SimpleChanges): void;
    clear(): void;
    inputChanged(value?: string | null): void;
    onOptionsSelected($event: MatAutocompleteSelectedEvent): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    getValueLabel(el?: Country): string;
    _loadCountriesFromDb(): Promise<Country[]>;
    private _importLang;
    private _applyFilters;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatSelectCountryComponent, [null, { optional: true; host: true; skipSelf: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MatSelectCountryComponent, "mat-select-country", never, { "appearance": { "alias": "appearance"; "required": false; }; "countries": { "alias": "countries"; "required": false; }; "label": { "alias": "label"; "required": false; }; "placeHolder": { "alias": "placeHolder"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "nullable": { "alias": "nullable"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "class": { "alias": "class"; "required": false; }; "itemsLoadSize": { "alias": "itemsLoadSize"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "showCallingCode": { "alias": "showCallingCode"; "required": false; }; "excludedCountries": { "alias": "excludedCountries"; "required": false; }; "language": { "alias": "language"; "required": false; }; "name": { "alias": "name"; "required": false; }; "error": { "alias": "error"; "required": false; }; "cleareable": { "alias": "cleareable"; "required": false; }; "formControlName": { "alias": "formControlName"; "required": false; }; "panelWidth": { "alias": "panelWidth"; "required": false; }; "_value": { "alias": "value"; "required": false; }; "extendWidth": { "alias": "extendWidth"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; }, { "onCountrySelected": "onCountrySelected"; }, never, never, false, never>;
}
export {};
